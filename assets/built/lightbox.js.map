{"version":3,"names":[],"mappings":"","sources":["lightbox.js"],"sourcesContent":["/**\n * Enhanced Lightbox Component for FrameGrid Ghost Theme\n * Implements advanced navigation with looping, keyboard shortcuts, and accessibility\n */\n\n// Enhanced navigation with looping support\nfunction enhanceLightboxNavigation() {\n  // Wait for Alpine.js to be available\n  document.addEventListener(\"alpine:init\", () => {\n    // Store reference to the original portfolioGrid component\n    const originalPortfolioGrid = Alpine._x_dataStack;\n\n    // Enhance the existing Alpine.js component\n    Alpine.data(\"portfolioGrid\", () => ({\n      lightboxOpen: false,\n      currentIndex: 0,\n      loading: false,\n      imageLoading: false,\n      imageError: false,\n      posts: [],\n      currentPost: null,\n      imageCache: new Map(),\n\n      init() {\n        // Initialize posts data from server-side rendered content\n        // This will be populated by the Handlebars template\n        this.posts = window.portfolioPosts || [];\n\n        // Preload first few images for better UX\n        this.preloadInitialImages();\n\n        // Add enhanced keyboard event listeners\n        this.setupKeyboardNavigation();\n      },\n\n      initMasonry() {\n        // Initialize masonry layout\n        this.$nextTick(() => {\n          this.updateMasonryLayout();\n        });\n      },\n\n      updateMasonryLayout() {\n        // CSS Grid handles the masonry layout automatically\n        // This method can be extended for more complex masonry logic\n      },\n\n      openLightbox(index) {\n        this.currentIndex = index;\n        this.currentPost = this.posts[index];\n        this.lightboxOpen = true;\n        this.imageLoading = true;\n        this.imageError = false;\n\n        // Add body class to prevent scrolling\n        document.body.classList.add(\"lightbox-open\");\n\n        // Focus management for accessibility\n        this.$nextTick(() => {\n          const closeButton = document.querySelector(\".lightbox-close\");\n          if (closeButton) closeButton.focus();\n        });\n\n        // Preload adjacent images for smooth navigation\n        this.preloadAdjacentImages(index);\n      },\n\n      closeLightbox() {\n        this.lightboxOpen = false;\n        this.imageLoading = false;\n        this.imageError = false;\n        document.body.classList.remove(\"lightbox-open\");\n      },\n\n      // Enhanced navigation with looping support\n      nextImage() {\n        if (!this.imageLoading && this.posts.length > 0) {\n          // Implement looping: if at last image, go to first\n          const nextIndex =\n            this.currentIndex >= this.posts.length - 1\n              ? 0\n              : this.currentIndex + 1;\n          this.navigateToImage(nextIndex);\n        }\n      },\n\n      previousImage() {\n        if (!this.imageLoading && this.posts.length > 0) {\n          // Implement looping: if at first image, go to last\n          const prevIndex =\n            this.currentIndex <= 0\n              ? this.posts.length - 1\n              : this.currentIndex - 1;\n          this.navigateToImage(prevIndex);\n        }\n      },\n\n      // New navigation methods for keyboard shortcuts\n      goToFirstImage() {\n        if (!this.imageLoading && this.posts.length > 0) {\n          this.navigateToImage(0);\n        }\n      },\n\n      goToLastImage() {\n        if (!this.imageLoading && this.posts.length > 0) {\n          this.navigateToImage(this.posts.length - 1);\n        }\n      },\n\n      handleEnterKey(event) {\n        // Handle Enter key on focused navigation buttons\n        const activeElement = document.activeElement;\n        if (activeElement && activeElement.classList.contains(\"lightbox-nav\")) {\n          event.preventDefault();\n          activeElement.click();\n        }\n      },\n\n      setupKeyboardNavigation() {\n        // Enhanced keyboard navigation with debouncing\n        let keyboardDebounce = null;\n\n        document.addEventListener(\"keydown\", (event) => {\n          if (!this.lightboxOpen) return;\n\n          // Clear existing debounce\n          if (keyboardDebounce) {\n            clearTimeout(keyboardDebounce);\n          }\n\n          // Debounce rapid key presses\n          keyboardDebounce = setTimeout(() => {\n            switch (event.key) {\n              case \"ArrowLeft\":\n                event.preventDefault();\n                this.previousImage();\n                break;\n\n              case \"ArrowRight\":\n                event.preventDefault();\n                this.nextImage();\n                break;\n\n              case \"Escape\":\n                event.preventDefault();\n                this.closeLightbox();\n                break;\n\n              case \" \": // Space bar\n                event.preventDefault();\n                this.nextImage();\n                break;\n\n              case \"Home\":\n                event.preventDefault();\n                this.goToFirstImage();\n                break;\n\n              case \"End\":\n                event.preventDefault();\n                this.goToLastImage();\n                break;\n\n              case \"Enter\":\n                this.handleEnterKey(event);\n                break;\n            }\n          }, 50); // 50ms debounce\n        });\n      },\n\n      navigateToImage(index) {\n        this.currentIndex = index;\n        this.currentPost = this.posts[index];\n        this.imageLoading = true;\n        this.imageError = false;\n\n        // Preload adjacent images with circular logic\n        this.preloadAdjacentImages(index);\n      },\n\n      handleImageLoad() {\n        this.imageLoading = false;\n        this.imageError = false;\n      },\n\n      handleImageError() {\n        this.imageLoading = false;\n        this.imageError = true;\n      },\n\n      getLightboxImageUrl(post) {\n        if (!post?.feature_image) return \"\";\n\n        // Use appropriate size based on screen size and pixel ratio\n        const isMobile = window.innerWidth <= 768;\n        const isHighDPI = window.devicePixelRatio > 1;\n\n        // Choose optimal size\n        let size = \"xl\"; // 2400px default\n        if (isMobile && !isHighDPI) {\n          size = \"l\"; // 1600px for mobile\n        } else if (isMobile && isHighDPI) {\n          size = \"xl\"; // 2400px for high-DPI mobile\n        }\n\n        // Ghost img_url helper equivalent for client-side\n        return this.getGhostImageUrl(post.feature_image, size);\n      },\n\n      getLightboxImageSrcset(post) {\n        if (!post?.feature_image) return \"\";\n\n        // Generate responsive srcset for optimal loading\n        const baseUrl = post.feature_image;\n        return [\n          `${this.getGhostImageUrl(baseUrl, \"l\")} 1600w`,\n          `${this.getGhostImageUrl(baseUrl, \"xl\")} 2400w`,\n        ].join(\", \");\n      },\n\n      getGhostImageUrl(imageUrl, size) {\n        if (!imageUrl) return \"\";\n\n        // Size mappings from package.json config\n        const sizes = {\n          xs: 300,\n          s: 600,\n          m: 1000,\n          l: 1600,\n          xl: 2400,\n        };\n\n        const width = sizes[size] || sizes[\"xl\"];\n\n        // Handle Ghost's image transformation URL pattern\n        if (imageUrl.includes(\"/content/images/\")) {\n          // For local Ghost installations\n          return imageUrl.replace(\n            \"/content/images/\",\n            `/content/images/size/w${width}/`\n          );\n        } else if (\n          imageUrl.includes(\"images.unsplash.com\") ||\n          imageUrl.includes(\"cdn.\")\n        ) {\n          // For external images, append size parameter\n          const separator = imageUrl.includes(\"?\") ? \"&\" : \"?\";\n          return `${imageUrl}${separator}w=${width}`;\n        }\n\n        // Fallback: return original URL\n        return imageUrl;\n      },\n\n      preloadInitialImages() {\n        // Preload first 3 images for better initial experience\n        const imagesToPreload = this.posts.slice(0, 3);\n        imagesToPreload.forEach((post) => {\n          if (post.feature_image) {\n            this.preloadImage(post);\n          }\n        });\n      },\n\n      preloadAdjacentImages(currentIndex) {\n        // Enhanced preloading with circular navigation support\n        const totalPosts = this.posts.length;\n        if (totalPosts <= 1) return;\n\n        // Calculate adjacent indices with circular logic\n        const prevIndex = currentIndex <= 0 ? totalPosts - 1 : currentIndex - 1;\n        const nextIndex = currentIndex >= totalPosts - 1 ? 0 : currentIndex + 1;\n\n        // Preload previous and next images with circular logic\n        [prevIndex, nextIndex].forEach((index) => {\n          const post = this.posts[index];\n          if (post?.feature_image) {\n            this.preloadImage(post);\n          }\n        });\n\n        // Also preload one more in each direction for smoother navigation\n        if (totalPosts > 3) {\n          const prevPrevIndex = prevIndex <= 0 ? totalPosts - 1 : prevIndex - 1;\n          const nextNextIndex = nextIndex >= totalPosts - 1 ? 0 : nextIndex + 1;\n\n          [prevPrevIndex, nextNextIndex].forEach((index) => {\n            const post = this.posts[index];\n            if (post?.feature_image) {\n              this.preloadImage(post);\n            }\n          });\n        }\n      },\n\n      preloadImage(post) {\n        const imageUrl = this.getLightboxImageUrl(post);\n        if (imageUrl && !this.imageCache.has(imageUrl)) {\n          const img = new Image();\n          img.onload = () => {\n            this.imageCache.set(imageUrl, true);\n          };\n          img.onerror = () => {\n            this.imageCache.set(imageUrl, false);\n          };\n          img.src = imageUrl;\n        }\n      },\n\n      async loadMore() {\n        if (this.loading) return;\n\n        this.loading = true;\n        try {\n          // This will be handled by the template's pagination\n          // Implementation depends on Ghost's Content API setup\n          console.log(\"Load more functionality available in template\");\n        } catch (error) {\n          console.error(\"Error loading more posts:\", error);\n        } finally {\n          this.loading = false;\n        }\n      },\n    }));\n  });\n}\n\n// Initialize enhanced navigation when DOM is ready\nif (document.readyState === \"loading\") {\n  document.addEventListener(\"DOMContentLoaded\", enhanceLightboxNavigation);\n} else {\n  enhanceLightboxNavigation();\n}\n"],"file":"lightbox.js"}