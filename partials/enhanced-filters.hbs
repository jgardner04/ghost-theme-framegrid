{{! Enhanced Filters Partial }}
{{! Reusable filtering component for portfolio categories }}

<div class="portfolio-filters" x-data="portfolioFilters()" x-init="init()">
  <div
    class="filters-container bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 py-4"
  >
    <div class="container mx-auto px-4 sm:px-6 lg:px-8">
      <div
        class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4"
      >

        {{! Left side: Filter toggles }}
        <div class="flex flex-wrap items-center gap-4">
          {{! Sort dropdown }}
          <div class="relative" x-data="{ open: false }">
            <button
              @click="open = !open"
              @click.away="open = false"
              class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              :aria-expanded="open"
              aria-haspopup="true"
            >
              <svg
                class="w-4 h-4 mr-2"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M3 4h13M3 8h9m-9 4h6m4 0l4-4m0 0l4 4m-4-4v12"
                ></path>
              </svg>
              <span x-text="sortOptions[currentSort]">Newest First</span>
              <svg
                class="w-4 h-4 ml-2"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M19 9l-7 7-7-7"
                ></path>
              </svg>
            </button>

            {{! Sort dropdown menu }}
            <div
              x-show="open"
              x-transition:enter="transition ease-out duration-100"
              x-transition:enter-start="transform opacity-0 scale-95"
              x-transition:enter-end="transform opacity-100 scale-100"
              x-transition:leave="transition ease-in duration-75"
              x-transition:leave-start="transform opacity-100 scale-100"
              x-transition:leave-end="transform opacity-0 scale-95"
              class="absolute right-0 mt-2 w-56 origin-top-right bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-md shadow-lg z-10"
              style="display: none;"
            >
              <div class="py-1">
                <template x-for="(label, key) in sortOptions" :key="key">
                  <button
                    @click="setSortOption(key); open = false"
                    class="block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700"
                    :class="{ 'bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300': currentSort === key }"
                    x-text="label"
                  ></button>
                </template>
              </div>
            </div>
          </div>

          {{! Year filter }}
          <div class="relative" x-data="{ open: false }">
            <button
              @click="open = !open"
              @click.away="open = false"
              class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              <svg
                class="w-4 h-4 mr-2"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                ></path>
              </svg>
              <span
                x-text="selectedYear === 'all' ? 'All Years' : selectedYear"
              >All Years</span>
              <svg
                class="w-4 h-4 ml-2"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M19 9l-7 7-7-7"
                ></path>
              </svg>
            </button>

            <div
              x-show="open"
              x-transition
              class="absolute right-0 mt-2 w-32 origin-top-right bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-md shadow-lg z-10"
              style="display: none;"
            >
              <div class="py-1">
                <button
                  @click="setYearFilter('all'); open = false"
                  class="block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700"
                  :class="{ 'bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300': selectedYear === 'all' }"
                >
                  All Years
                </button>
                <template x-for="year in availableYears" :key="year">
                  <button
                    @click="setYearFilter(year); open = false"
                    class="block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700"
                    :class="{ 'bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300': selectedYear === year }"
                    x-text="year"
                  ></button>
                </template>
              </div>
            </div>
          </div>

          {{! Featured filter toggle }}
          <label class="inline-flex items-center">
            <input
              type="checkbox"
              x-model="featuredOnly"
              @change="applyFilters()"
              class="form-checkbox h-4 w-4 text-blue-600 transition duration-150 ease-in-out"
            />
            <span
              class="ml-2 text-sm font-medium text-gray-700 dark:text-gray-200"
            >Featured Only</span>
          </label>
        </div>

        {{! Right side: View controls and results }}
        <div class="flex items-center gap-4">
          {{! Results count }}
          <div class="text-sm text-gray-500 dark:text-gray-400">
            <span x-text="filteredCount"></span>
            of
            <span x-text="totalCount"></span>
            images
          </div>

          {{! View toggle }}
          <div
            class="flex items-center border border-gray-300 dark:border-gray-600 rounded-md"
          >
            <button
              @click="setViewMode('grid')"
              class="px-3 py-1 text-sm font-medium transition-colors"
              :class="viewMode === 'grid' ? 'bg-blue-500 text-white' : 'text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700'"
              aria-label="Grid view"
            >
              <svg
                class="w-4 h-4"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"
                ></path>
              </svg>
            </button>
            <button
              @click="setViewMode('list')"
              class="px-3 py-1 text-sm font-medium transition-colors"
              :class="viewMode === 'list' ? 'bg-blue-500 text-white' : 'text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700'"
              aria-label="List view"
            >
              <svg
                class="w-4 h-4"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M4 6h16M4 10h16M4 14h16M4 18h16"
                ></path>
              </svg>
            </button>
          </div>
        </div>
      </div>

      {{! Active filters display }}
      <div class="mt-4" x-show="hasActiveFilters()" x-transition>
        <div class="flex flex-wrap items-center gap-2">
          <span
            class="text-sm font-medium text-gray-700 dark:text-gray-200"
          >Active filters:</span>

          <template x-for="filter in getActiveFilters()" :key="filter.key">
            <span
              class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 dark:bg-blue-900/20 text-blue-800 dark:text-blue-200"
            >
              <span x-text="filter.label"></span>
              <button
                @click="removeFilter(filter.key)"
                class="ml-1 inline-flex items-center justify-center w-4 h-4 rounded-full hover:bg-blue-200 dark:hover:bg-blue-800 focus:outline-none"
                :aria-label="'Remove ' + filter.label + ' filter'"
              >
                <svg
                  class="w-3 h-3"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M6 18L18 6M6 6l12 12"
                  ></path>
                </svg>
              </button>
            </span>
          </template>

          <button
            @click="clearAllFilters()"
            class="text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200 font-medium"
          >
            Clear all
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

{{! Enhanced Filters Alpine.js Data }}
<script>
  document.addEventListener('alpine:init', () => {
  Alpine.data('portfolioFilters', () => ({ // Filter state currentSort:
  'newest', selectedYear: 'all', featuredOnly: false, viewMode: 'grid', // Data
  totalCount: 0, filteredCount: 0, availableYears: [], // Sort options
  sortOptions: { 'newest': 'Newest First', 'oldest': 'Oldest First',
  'alphabetical': 'A-Z', 'reverse-alphabetical': 'Z-A', 'featured': 'Featured
  First' }, init() { // Initialize available years from posts data
  this.initializeAvailableYears(); this.updateCounts(); // Listen for filter
  changes from URL params this.syncWithUrlParams(); },
  initializeAvailableYears() { // Extract years from posts (this would be
  populated by the template) const posts = window.portfolioPosts || []; const
  years = [...new Set(posts.map(post => new
  Date(post.published_at).getFullYear()))].sort((a, b) => b - a);
  this.availableYears = years; }, setSortOption(sortKey) { this.currentSort =
  sortKey; this.applyFilters(); this.updateUrl(); }, setYearFilter(year) {
  this.selectedYear = year; this.applyFilters(); this.updateUrl(); },
  setViewMode(mode) { this.viewMode = mode; this.updateUrl(); // Dispatch event
  for masonry to re-layout this.$dispatch('view-mode-changed', { mode }); },
  applyFilters() { // This would trigger the actual filtering logic // For
  Ghost, this might involve updating the current page with new parameters
  this.updateCounts(); this.$dispatch('filters-changed', { sort:
  this.currentSort, year: this.selectedYear, featured: this.featuredOnly }); },
  updateCounts() { // Update filtered count based on current filters // This
  would be calculated from the actual filtered results this.filteredCount =
  this.totalCount; // Placeholder }, hasActiveFilters() { return
  this.selectedYear !== 'all' || this.featuredOnly || this.currentSort !==
  'newest'; }, getActiveFilters() { const filters = []; if (this.selectedYear
  !== 'all') { filters.push({ key: 'year', label: this.selectedYear }); } if
  (this.featuredOnly) { filters.push({ key: 'featured', label: 'Featured' }); }
  if (this.currentSort !== 'newest') { filters.push({ key: 'sort', label:
  this.sortOptions[this.currentSort] }); } return filters; },
  removeFilter(filterKey) { switch (filterKey) { case 'year':
  this.setYearFilter('all'); break; case 'featured': this.featuredOnly = false;
  this.applyFilters(); break; case 'sort': this.setSortOption('newest'); break;
  } }, clearAllFilters() { this.selectedYear = 'all'; this.featuredOnly = false;
  this.currentSort = 'newest'; this.applyFilters(); this.updateUrl(); },
  updateUrl() { // Update URL parameters without page reload const params = new
  URLSearchParams(); if (this.selectedYear !== 'all') params.set('year',
  this.selectedYear); if (this.featuredOnly) params.set('featured', '1'); if
  (this.currentSort !== 'newest') params.set('sort', this.currentSort); if
  (this.viewMode !== 'grid') params.set('view', this.viewMode); const newUrl =
  window.location.pathname + (params.toString() ? '?' + params.toString() : '');
  window.history.replaceState({}, '', newUrl); }, syncWithUrlParams() { // Sync
  filter state with URL parameters on page load const params = new
  URLSearchParams(window.location.search); this.selectedYear =
  params.get('year') || 'all'; this.featuredOnly = params.get('featured') ===
  '1'; this.currentSort = params.get('sort') || 'newest'; this.viewMode =
  params.get('view') || 'grid'; } })); });
</script>
