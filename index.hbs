{{! Home page template with masonry grid }}

{{! Hero section }}
{{#if @site.cover_image}}
  <section class="hero-section">
    <div class="hero-image-container">
      <img
        src="{{img_url @site.cover_image size="xl"}}"
        alt="{{@site.title}}"
        class="hero-image"
      />
      <div class="hero-overlay">
        <div class="hero-content">
          <h1 class="hero-title">{{@site.title}}</h1>
          {{#if @site.description}}
            <p class="hero-description">{{@site.description}}</p>
          {{/if}}
        </div>
      </div>
    </div>
  </section>
{{/if}}

{{! Portfolio grid section }}
<section class="portfolio-section" id="portfolio">
  <div class="portfolio-container">
    {{! Grid controls }}
    <div class="grid-controls" x-data="{ view: 'grid' }">
      <h2 class="section-title">Latest Work</h2>
      <div class="view-controls">
        <button
          @click="view = 'grid'"
          :class="{ 'active': view === 'grid' }"
          class="view-btn"
          aria-label="Grid view"
        >
          <svg class="view-icon" viewBox="0 0 24 24" fill="currentColor">
            <path
              d="M3 3h7v7H3V3zm0 11h7v7H3v-7zm11-11h7v7h-7V3zm0 11h7v7h-7v-7z"
            />
          </svg>
        </button>
        <button
          @click="view = 'list'"
          :class="{ 'active': view === 'list' }"
          class="view-btn"
          aria-label="List view"
        >
          <svg class="view-icon" viewBox="0 0 24 24" fill="currentColor">
            <path
              d="M3 5h2v2H3V5zm0 4h2v2H3V9zm0 4h2v2H3v-2zm4-8h14v2H7V5zm0 4h14v2H7V9zm0 4h14v2H7v-2z"
            />
          </svg>
        </button>
      </div>
    </div>

    {{! Use the new masonry portfolio partial }}
    {{> masonry-portfolio posts=posts}}

      {{! Load more button for infinite scroll }}
      {{#if pagination.next}}
        <div class="load-more-container" x-intersect="loadMore()">
          <button
            class="load-more-btn"
            @click="loadMore()"
            :disabled="loading"
            x-text="loading ? 'Loading...' : 'Load More'"
          >
            Load More
          </button>
        </div>
      {{/if}}

      {{! Lightbox modal }}
      <div
        class="lightbox-modal"
        x-show="lightboxOpen"
        x-transition.opacity.duration.300ms
        @click.self="closeLightbox()"
        @keydown.escape.window="closeLightbox()"
      >

        <div class="lightbox-container">
          {{! Navigation buttons }}
          <button
            class="lightbox-nav lightbox-prev"
            @click="previousImage()"
            :disabled="currentIndex === 0"
            aria-label="Previous image"
          >
            <svg viewBox="0 0 24 24" fill="currentColor">
              <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z" />
            </svg>
          </button>

          <button
            class="lightbox-nav lightbox-next"
            @click="nextImage()"
            :disabled="currentIndex === posts.length - 1"
            aria-label="Next image"
          >
            <svg viewBox="0 0 24 24" fill="currentColor">
              <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z" />
            </svg>
          </button>

          {{! Close button }}
          <button
            class="lightbox-close"
            @click="closeLightbox()"
            aria-label="Close lightbox"
          >
            <svg viewBox="0 0 24 24" fill="currentColor">
              <path
                d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
              />
            </svg>
          </button>

          {{! Lightbox content }}
          <div class="lightbox-content" x-show="currentPost">
            <div class="lightbox-image-container">
              <img
                :src="currentPost?.feature_image_url"
                :alt="currentPost?.title"
                class="lightbox-image"
              />
            </div>
            <div class="lightbox-info">
              <h3 class="lightbox-title" x-text="currentPost?.title"></h3>
              <p class="lightbox-excerpt" x-text="currentPost?.excerpt"></p>
              <div class="lightbox-meta">
                <time x-text="currentPost?.date"></time>
                <span x-text="currentPost?.primary_tag"></span>
              </div>
              <a :href="currentPost?.url" class="lightbox-read-more">Read Full
                Story</a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

{{! Alpine.js portfolio grid component }}
<script>
  document.addEventListener('alpine:init', () => { Alpine.data('portfolioGrid',
  () => ({ lightboxOpen: false, currentIndex: 0, loading: false, posts: [],
  currentPost: null, init() { // Initialize posts data from server-side rendered
  content this.posts = [
  {{#foreach posts}}
    { id: '{{id}}', title: '{{title}}', excerpt: '{{excerpt words="30"}}', url:
    '{{url}}', feature_image_url: '{{#if feature_image}}{{img_url
        feature_image
        size="xl"
      }}{{/if}}', date: '{{date format="MMM DD, YYYY"}}', primary_tag: '{{#if
      primary_tag
    }}{{primary_tag.name}}{{/if}}' }{{#unless @last}},{{/unless}}
  {{/foreach}}
  ]; }, initMasonry() { // Initialize masonry layout this.$nextTick(() => {
  this.updateMasonryLayout(); }); }, updateMasonryLayout() { // CSS Grid handles
  the masonry layout automatically // This method can be extended for more
  complex masonry logic }, openLightbox(index) { this.currentIndex = index;
  this.currentPost = this.posts[index]; this.lightboxOpen = true;
  document.body.classList.add('lightbox-open'); }, closeLightbox() {
  this.lightboxOpen = false; document.body.classList.remove('lightbox-open'); },
  nextImage() { if (this.currentIndex < this.posts.length - 1) {
  this.currentIndex++; this.currentPost = this.posts[this.currentIndex]; } },
  previousImage() { if (this.currentIndex > 0) { this.currentIndex--;
  this.currentPost = this.posts[this.currentIndex]; } }, async loadMore() { if
  (this.loading) return; this.loading = true; try { // Implement infinite scroll
  loading with Ghost Content API const nextPage = '{{pagination.next}}'; if
  (nextPage) { const response = await fetch(`${nextPage}?formats=html,json`);
  const data = await response.json(); // Add new posts to the array and update
  the grid // Implementation would continue here for full infinite scroll } }
  catch (error) { console.error('Error loading more posts:', error); } finally {
  this.loading = false; } } })); });
</script>
