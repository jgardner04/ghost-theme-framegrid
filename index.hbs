{{! Home page template with masonry grid }}

{{! Hero section }}
{{#if @site.cover_image}}
  <section class="hero-section">
    <div class="hero-image-container">
      <img
        src="{{img_url @site.cover_image size="xl"}}"
        alt="{{@site.title}}"
        class="hero-image"
      />
      <div class="hero-overlay">
        <div class="hero-content">
          <h1 class="hero-title">{{@site.title}}</h1>
          {{#if @site.description}}
            <p class="hero-description">{{@site.description}}</p>
          {{/if}}
        </div>
      </div>
    </div>
  </section>
{{/if}}

{{! Portfolio grid section }}
<section class="portfolio-section" id="portfolio">
  <div class="portfolio-container">
    {{! Grid controls }}
    <div class="grid-controls" x-data="{ view: 'grid' }">
      <h2 class="section-title">Latest Work</h2>
      <div class="view-controls">
        <button
          @click="view = 'grid'"
          :class="{ 'active': view === 'grid' }"
          class="view-btn"
          aria-label="Grid view"
        >
          <svg class="view-icon" viewBox="0 0 24 24" fill="currentColor">
            <path
              d="M3 3h7v7H3V3zm0 11h7v7H3v-7zm11-11h7v7h-7V3zm0 11h7v7h-7v-7z"
            />
          </svg>
        </button>
        <button
          @click="view = 'list'"
          :class="{ 'active': view === 'list' }"
          class="view-btn"
          aria-label="List view"
        >
          <svg class="view-icon" viewBox="0 0 24 24" fill="currentColor">
            <path
              d="M3 5h2v2H3V5zm0 4h2v2H3V9zm0 4h2v2H3v-2zm4-8h14v2H7V5zm0 4h14v2H7V9zm0 4h14v2H7v-2z"
            />
          </svg>
        </button>
      </div>
    </div>

    {{! Masonry grid with Alpine.js lightbox }}
    <div
      class="masonry-container"
      x-data="portfolioGrid()"
      x-init="initMasonry()"
    >

      {{! Grid }}
      <div
        class="masonry-grid"
        :class="{ 'list-view': $store.view === 'list' }"
        style="--grid-columns: var(--grid-columns, 3);"
      >

        {{#foreach posts}}
          <article
            class="portfolio-item"
            data-post-id="{{id}}"
            x-data="{ loaded: false }"
            @click="openLightbox({{@index}})"
          >

            {{! Featured image }}
            {{#if feature_image}}
              <div class="portfolio-image-container">
                <img
                  src="{{img_url feature_image size="m"}}"
                  alt="{{title}}"
                  class="portfolio-image"
                  loading="lazy"
                  @load="loaded = true"
                  :class="{ 'loaded': loaded }"
                />

                {{! Hover overlay }}
                <div class="portfolio-overlay">
                  <div class="portfolio-content">
                    <h3 class="portfolio-title">{{title}}</h3>
                    {{#if excerpt}}
                      <p class="portfolio-excerpt">{{excerpt words="15"}}</p>
                    {{/if}}
                    <div class="portfolio-meta">
                      <time
                        class="portfolio-date"
                        datetime="{{date format="YYYY-MM-DD"}}"
                      >
                        {{date format="MMM DD, YYYY"}}
                      </time>
                      {{#if primary_tag}}
                        <span class="portfolio-tag">{{primary_tag.name}}</span>
                      {{/if}}
                    </div>
                  </div>
                </div>
              </div>
            {{else}}
              {{! Fallback for posts without featured image }}
              <div class="portfolio-text-only">
                <h3 class="portfolio-title">{{title}}</h3>
                {{#if excerpt}}
                  <p class="portfolio-excerpt">{{excerpt}}</p>
                {{/if}}
                <a href="{{url}}" class="read-more-link">Read More</a>
              </div>
            {{/if}}
          </article>
        {{/foreach}}
      </div>

      {{! Load more button for infinite scroll }}
      {{#if pagination.next}}
        <div class="load-more-container" x-intersect="loadMore()">
          <button
            class="load-more-btn"
            @click="loadMore()"
            :disabled="loading"
            x-text="loading ? 'Loading...' : 'Load More'"
          >
            Load More
          </button>
        </div>
      {{/if}}

      {{! Lightbox modal }}
      <div
        class="lightbox-modal"
        x-show="lightboxOpen"
        x-transition.opacity.duration.300ms
        @click.self="closeLightbox()"
        @keydown.escape.window="closeLightbox()"
        @keydown.arrow-left.window="previousImage()"
        @keydown.arrow-right.window="nextImage()"
        @keydown.space.window.prevent="nextImage()"
        @keydown.home.window.prevent="goToFirstImage()"
        @keydown.end.window.prevent="goToLastImage()"
        role="dialog"
        aria-modal="true"
        :aria-hidden="!lightboxOpen"
        :aria-label="`Image ${currentIndex + 1} of ${posts.length}`"
      >

        <div class="lightbox-container">
          {{! Position indicator }}
          <div class="lightbox-position-indicator">
            <span x-text="`${currentIndex + 1} of ${posts.length}`"></span>
          </div>

          {{! Navigation buttons }}
          <button
            class="lightbox-nav lightbox-prev"
            @click="previousImage()"
            @keydown.space.prevent="previousImage()"
            @keydown.enter.prevent="previousImage()"
            :class="{ 'loading': imageLoading }"
            :aria-label="`Previous image (${currentIndex === 0 ? posts.length : currentIndex} of ${posts.length})`"
            tabindex="0"
          >
            <svg viewBox="0 0 24 24" fill="currentColor">
              <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z" />
            </svg>
          </button>

          <button
            class="lightbox-nav lightbox-next"
            @click="nextImage()"
            @keydown.space.prevent="nextImage()"
            @keydown.enter.prevent="nextImage()"
            :class="{ 'loading': imageLoading }"
            :aria-label="`Next image (${currentIndex === posts.length - 1 ? 1 : currentIndex + 2} of ${posts.length})`"
            tabindex="0"
          >
            <svg viewBox="0 0 24 24" fill="currentColor">
              <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z" />
            </svg>
          </button>

          {{! Close button }}
          <button
            class="lightbox-close"
            @click="closeLightbox()"
            aria-label="Close lightbox"
          >
            <svg viewBox="0 0 24 24" fill="currentColor">
              <path
                d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
              />
            </svg>
          </button>

          {{! Lightbox content }}
          <div class="lightbox-content" x-show="currentPost">
            <div class="lightbox-image-container">
              {{! Loading indicator }}
              <div
                class="lightbox-loading"
                x-show="imageLoading"
                x-transition:enter="transition ease-out duration-200"
                x-transition:enter-start="opacity-0"
                x-transition:enter-end="opacity-100"
              >
                <div class="loading-spinner"></div>
                <p class="loading-text">Loading image...</p>
              </div>

              {{! Error state }}
              <div
                class="lightbox-error"
                x-show="imageError && !imageLoading"
                x-transition:enter="transition ease-out duration-200"
                x-transition:enter-start="opacity-0"
                x-transition:enter-end="opacity-100"
              >
                <div class="error-icon">
                  <svg viewBox="0 0 24 24" fill="currentColor">
                    <path
                      d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
                    />
                  </svg>
                </div>
                <p class="error-text">Unable to load image</p>
              </div>

              {{! Main lightbox image }}
              <img
                x-show="!imageLoading && !imageError && currentPost"
                :src="getLightboxImageUrl(currentPost)"
                :alt="currentPost?.title || 'Portfolio image'"
                :srcset="getLightboxImageSrcset(currentPost)"
                sizes="(max-width: 768px) 100vw, (max-width: 1200px) 90vw, 80vw"
                class="lightbox-image"
                @load="handleImageLoad()"
                @error="handleImageError()"
                x-transition:enter="transition ease-out duration-300"
                x-transition:enter-start="opacity-0 scale-95"
                x-transition:enter-end="opacity-100 scale-100"
              />
            </div>

            <div class="lightbox-info">
              <h3 class="lightbox-title" x-text="currentPost?.title"></h3>
              <p class="lightbox-excerpt" x-text="currentPost?.excerpt"></p>
              <div class="lightbox-meta">
                <time x-text="currentPost?.date"></time>
                <span
                  x-show="currentPost?.primary_tag"
                  x-text="currentPost?.primary_tag"
                ></span>
              </div>
              <a
                :href="currentPost?.url"
                class="lightbox-read-more"
                x-show="currentPost?.url"
              >
                Read Full Story
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

{{! Alpine.js portfolio grid component }}
<script>
  document.addEventListener('alpine:init', () => { Alpine.data('portfolioGrid',
  () => ({ lightboxOpen: false, currentIndex: 0, loading: false, imageLoading:
  false, imageError: false, posts: [], currentPost: null, imageCache: new Map(),
  init() { // Initialize posts data from server-side rendered content this.posts
  = [
  {{#foreach posts}}
    { id: '{{id}}', title: '{{title}}', excerpt: '{{excerpt words="30"}}', url:
    '{{url}}', feature_image: '{{feature_image}}', date: '{{date
      format="MMM DD, YYYY"
    }}', primary_tag: '{{#if primary_tag}}{{primary_tag.name}}{{/if}}' }{{#unless
      @last
    }},{{/unless}}
  {{/foreach}}
  ]; // Preload first few images for better UX this.preloadInitialImages(); },
  initMasonry() { // Initialize masonry layout this.$nextTick(() => {
  this.updateMasonryLayout(); }); }, updateMasonryLayout() { // CSS Grid handles
  the masonry layout automatically // This method can be extended for more
  complex masonry logic }, openLightbox(index) { this.currentIndex = index;
  this.currentPost = this.posts[index]; this.lightboxOpen = true;
  this.imageLoading = true; this.imageError = false; // Add body class to
  prevent scrolling document.body.classList.add('lightbox-open'); // Focus
  management for accessibility this.$nextTick(() => { const closeButton =
  document.querySelector('.lightbox-close'); if (closeButton)
  closeButton.focus(); }); // Preload adjacent images for smooth navigation
  this.preloadAdjacentImages(index); }, closeLightbox() { this.lightboxOpen =
  false; this.imageLoading = false; this.imageError = false;
  document.body.classList.remove('lightbox-open'); }, // Enhanced navigation
  with looping support nextImage() { if (!this.imageLoading && this.posts.length
  > 0) { // Implement looping: if at last image, go to first const nextIndex =
  this.currentIndex >= this.posts.length - 1 ? 0 : this.currentIndex + 1;
  this.navigateToImage(nextIndex); } }, previousImage() { if (!this.imageLoading
  && this.posts.length > 0) { // Implement looping: if at first image, go to
  last const prevIndex = this.currentIndex <= 0 ? this.posts.length - 1 :
  this.currentIndex - 1; this.navigateToImage(prevIndex); } }, // New navigation
  methods for keyboard shortcuts goToFirstImage() { if (!this.imageLoading &&
  this.posts.length > 0) { this.navigateToImage(0); } }, goToLastImage() { if
  (!this.imageLoading && this.posts.length > 0) {
  this.navigateToImage(this.posts.length - 1); } }, handleEnterKey(event) { //
  Handle Enter key on focused navigation buttons const activeElement =
  document.activeElement; if (activeElement &&
  activeElement.classList.contains('lightbox-nav')) { event.preventDefault();
  activeElement.click(); } }, navigateToImage(index) { this.currentIndex =
  index; this.currentPost = this.posts[index]; this.imageLoading = true;
  this.imageError = false; // Preload adjacent images with circular logic
  this.preloadAdjacentImages(index); }, handleImageLoad() { this.imageLoading =
  false; this.imageError = false; }, handleImageError() { this.imageLoading =
  false; this.imageError = true; }, getLightboxImageUrl(post) { if
  (!post?.feature_image) return ''; // Use appropriate size based on screen size
  and pixel ratio const isMobile = window.innerWidth <= 768; const isHighDPI =
  window.devicePixelRatio > 1; // Choose optimal size let size = 'xl'; // 2400px
  default if (isMobile && !isHighDPI) { size = 'l'; // 1600px for mobile } else
  if (isMobile && isHighDPI) { size = 'xl'; // 2400px for high-DPI mobile } //
  Ghost img_url helper equivalent for client-side return
  this.getGhostImageUrl(post.feature_image, size); },
  getLightboxImageSrcset(post) { if (!post?.feature_image) return ''; //
  Generate responsive srcset for optimal loading const baseUrl =
  post.feature_image; return [ `${this.getGhostImageUrl(baseUrl, 'l')} 1600w`,
  `${this.getGhostImageUrl(baseUrl, 'xl')} 2400w` ].join(', '); },
  getGhostImageUrl(imageUrl, size) { if (!imageUrl) return ''; // Size mappings
  from package.json config const sizes = { 'xs': 300, 's': 600, 'm': 1000, 'l':
  1600, 'xl': 2400 }; const width = sizes[size] || sizes['xl']; // Handle
  Ghost's image transformation URL pattern if
  (imageUrl.includes('/content/images/')) { // For local Ghost installations
  return imageUrl.replace('/content/images/',
  `/content/images/size/w${width}/`); } else if
  (imageUrl.includes('images.unsplash.com') || imageUrl.includes('cdn.')) { //
  For external images, append size parameter const separator =
  imageUrl.includes('?') ? '&' : '?'; return
  `${imageUrl}${separator}w=${width}`; } // Fallback: return original URL return
  imageUrl; }, preloadInitialImages() { // Preload first 3 images for better
  initial experience const imagesToPreload = this.posts.slice(0, 3);
  imagesToPreload.forEach(post => { if (post.feature_image) {
  this.preloadImage(post); } }); }, preloadAdjacentImages(currentIndex) { //
  Enhanced preloading with circular navigation support const totalPosts =
  this.posts.length; if (totalPosts <= 1) return; // Calculate adjacent indices
  with circular logic const prevIndex = currentIndex <= 0 ? totalPosts - 1 :
  currentIndex - 1; const nextIndex = currentIndex >= totalPosts - 1 ? 0 :
  currentIndex + 1; // Preload previous and next images [prevIndex,
  nextIndex].forEach(index => { const post = this.posts[index]; if
  (post?.feature_image) { this.preloadImage(post); } }); }, preloadImage(post) {
  const imageUrl = this.getLightboxImageUrl(post); if (imageUrl &&
  !this.imageCache.has(imageUrl)) { const img = new Image(); img.onload = () =>
  { this.imageCache.set(imageUrl, true); }; img.onerror = () => {
  this.imageCache.set(imageUrl, false); }; img.src = imageUrl; } }, async
  loadMore() { if (this.loading) return; this.loading = true; try { // Implement
  infinite scroll loading with Ghost Content API const nextPage = '{{pagination.next}}';
  if (nextPage) { const response = await fetch(`${nextPage}?formats=html,json`);
  const data = await response.json(); // Add new posts to the array and update
  the grid if (data.posts) { const newPosts = data.posts.map(post => ({ id:
  post.id, title: post.title, excerpt: post.excerpt, url: post.url,
  feature_image: post.feature_image, date: new
  Date(post.published_at).toLocaleDateString('en-US', { year: 'numeric', month:
  'short', day: 'numeric' }), primary_tag: post.primary_tag?.name || '' }));
  this.posts.push(...newPosts); // Preload some of the new images
  this.preloadNewImages(newPosts.slice(0, 2)); } } catch (error) {
  console.error('Error loading more posts:', error); } finally { this.loading =
  false; } }, preloadNewImages(newPosts) { newPosts.forEach(post => { if
  (post.feature_image) { this.preloadImage(post); } }); } })); });
</script>
